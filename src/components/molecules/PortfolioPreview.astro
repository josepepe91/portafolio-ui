---
import type { MarkdownInstance } from "astro";
import type { Project } from "../../types";

interface Props {
	project: MarkdownInstance<Project>;
}

const { frontmatter, url } = Astro.props.project;
const imgUrl = `url(${frontmatter.img})`;
---

<div class="project-preview">
	<div class="project-img">
		<div class="descCard">
			<h3 class="title">{frontmatter.title}</h3>
			<p class="desc">{frontmatter.description}</p>
			{
				frontmatter.tags && (
					<div class="tags">
						{frontmatter.tags.map((t) => (
							<div class="tag" data-tag={t}>
								#{t}
							</div>
						))}
					</div>
				)
			}
		</div>
		<a class="link" href={url}>
			<span class="linkInner">View</span>
		</a>
	</div>
</div>

<style define:vars={{ imgUrl }}>
	.project-preview {
		@apply box-border w-full text-right cursor-pointer;
		@apply md:first:col-span-2;
	}
	.project-img {
		@apply relative box-border w-full h-52 bg-teal-dark rounded-2xl rounded-bl-none bg-cover bg-center;
		background-image: var(--imgUrl);
		color: white;
	}

	.project-img::before {
		content: "";
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.5);
		border-radius: 20px;
	}

	.descCard {
		padding: 1.5em;
		position: absolute;
		bottom: 0;
		right: 0;
	}

	.desc {
		line-height: 1.4;
	}

	.link {
		@apply rounded-2xl;
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		font-weight: 700;
		background: rgba(0, 0, 0, 0.25);
		opacity: 0;
		text-decoration: none;
		text-transform: uppercase;
		transition: opacity 150ms linear;
	}

	.link:focus,
	.link:hover {
		opacity: 1;
	}

	.link:focus,
	.link:hover .linkInner {
		transform: translateY(0);
		border-color: rgba(255, 255, 255, 0.625);
	}

	.linkInner {
		padding: 0.375em 1em;
		border: 2px solid rgba(255, 255, 255, 0);
		transition: transform 300ms cubic-bezier(0, 0.4, 0.6, 1),
			border-color 1s linear;
		transform: translateY(25%);
	}

	.tags {
		@apply flex flex-wrap flex-row-reverse;
	}

	.tag {
		@apply my-1 mr-2 py-1 text-sm;
	}

	.tag:nth-of-type(1n) {
		color: var(--c-green);
	}
	.tag:nth-of-type(2n) {
		color: var(--c-orange);
	}
	.tag:nth-of-type(3n) {
		color: var(--c-blue);
	}
	.tag:nth-of-type(4n) {
		color: var(--c-pink);
	}
</style>
